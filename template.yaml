---
# Source: nipa-travel-app/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prod-nipa-travel-nipa-travel-app-secret
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: prod-nipa-travel
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  DB_HOST: 
  DB_NAME: 
  DB_PASSWORD: 
  DB_PORT: 
  DB_USER: 
  JWT_SECRET:
---
# Source: nipa-travel-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prod-nipa-travel-nipa-travel-app-config
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: prod-nipa-travel
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  JWT_EXPIRES_IN: "7d"
  LOG_LEVEL: "info"
  NODE_ENV: "production"
  # Backend service URL for frontend (if needed)
  # BACKEND_SERVICE_URL: "http://prod-nipa-travel-nipa-travel-app-backend:8000"
---
# Source: nipa-travel-app/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prod-nipa-travel-nipa-travel-app-frontend
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: prod-nipa-travel
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: prod-nipa-travel
    app.kubernetes.io/component: frontend
---
# Source: nipa-travel-app/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prod-nipa-travel-nipa-travel-app-frontend
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: prod-nipa-travel
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nipa-travel-app
      app.kubernetes.io/instance: prod-nipa-travel
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nipa-travel-app
        app.kubernetes.io/instance: prod-nipa-travel
        app.kubernetes.io/component: frontend
    spec:
      containers:
        - name: frontend
          image: "caesar521/my-static-website:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: prod-nipa-travel-nipa-travel-app-config
                  key: NODE_ENV
            - name: PORT
              value: "80"
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
---
# Source: nipa-travel-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod-nipa-travel-nipa-travel-app-ingress
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: prod-nipa-travel
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    ingress.controller: apisix
  annotations:
    apisix.ingress.kubernetes.io/enable-access-log: "true"
    k8s.apisix.apache.org/load-balancer: least_conn
    kubernetes.io/ingress.class: apisix
    prometheus.io/port: "9091"
    prometheus.io/scrape: "true"
spec:
  ingressClassName: apisix
  rules:
    - host: "nipa.sudlor.me"
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: prod-nipa-travel-nipa-travel-app-backend
                port:
                  number: 8000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: prod-nipa-travel-nipa-travel-app-frontend
                port:
                  number: 3000
    - host: "grafana.sudlor.me"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 80
