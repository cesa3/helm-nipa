---
# Source: nipa-travel-app/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-nipa-travel-app-secret
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  DB_HOST: 
  DB_NAME: 
  DB_PASSWORD: 
  DB_PORT: 
  DB_USER: 
  JWT_SECRET:
---
# Source: nipa-travel-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nipa-travel-app-config
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  JWT_EXPIRES_IN: "7d"
  LOG_LEVEL: "info"
  NODE_ENV: "production"
  # Backend service URL for frontend (if needed)
  # BACKEND_SERVICE_URL: "http://my-release-nipa-travel-app-backend:8000"
---
# Source: nipa-travel-app/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-nipa-travel-app-backend
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
---
# Source: nipa-travel-app/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-nipa-travel-app-frontend
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: frontend
---
# Source: nipa-travel-app/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-nipa-travel-app-backend
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nipa-travel-app
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nipa-travel-app
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: backend
    spec:
      containers:
        - name: backend
          image: "mcowl/nipa-travel-backend:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            # From ConfigMap
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: my-release-nipa-travel-app-config
                  key: NODE_ENV
            - name: PORT
              value: "8000"
            - name: JWT_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  name: my-release-nipa-travel-app-config
                  key: JWT_EXPIRES_IN
            
            # From Secret
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: my-release-nipa-travel-app-secret
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: my-release-nipa-travel-app-secret
                  key: DB_PORT
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-nipa-travel-app-secret
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-nipa-travel-app-secret
                  key: DB_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: my-release-nipa-travel-app-secret
                  key: DB_NAME
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-nipa-travel-app-secret
                  key: JWT_SECRET
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: nipa-travel-app/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-nipa-travel-app-frontend
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nipa-travel-app
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nipa-travel-app
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: frontend
    spec:
      containers:
        - name: frontend
          image: "mcowl/nipa-travel-frontend:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: my-release-nipa-travel-app-config
                  key: NODE_ENV
            - name: PORT
              value: "3000"
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
---
# Source: nipa-travel-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nipa-travel-app-ingress
  labels:
    helm.sh/chart: nipa-travel-app-0.1.0
    app.kubernetes.io/name: nipa-travel-app
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  ingressClassName: traefik
  rules:
    - host: "nipa.sudlor.me"
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: my-release-nipa-travel-app-backend
                port:
                  number: 8000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-nipa-travel-app-frontend
                port:
                  number: 3000
